<style>
    .filterbox {
        border-radius: 15px;
        border: 2px solid var(--border-color);
        background-color: rgba(0, 0, 0, 0.4);
        background-size: cover;
        backdrop-filter: blur(5px);
        display: flex;
        justify-content: space-around;
        gap: 10px;
        padding: 2px 0;
        width: 100px;
        position: relative;
        overflow: hidden;
    }
    .filterbox::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: inherit;
        background-size: inherit;
        background-position: inherit;
        filter: blur(5px);
        transform: scale(1.6);
        z-index: -1;
        transition: filter 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    .filterbox:hover::before {
        filter: blur(0px);
        transform: scale(1.1);
    }
    .plane,
    .continent {
        cursor: pointer;
        padding: 10px;
        margin-bottom: 10px;
    }
    .active {
        border: 1px solid #ccc;
    }
    .gray {
        /* grayscale filter */
        filter: grayscale(100%);
    }
    .articles {
        display: none;
    }
    .list-group {
        display: flex;
        flex-wrap: wrap;
    }
    /* Hide the dropdown content by default */
    .dropdown-content {
        display: block;
        padding: 0px;
        position: absolute;
        align-self: center;
        top: 100%;
        z-index: 1;
        background-color: var(--secondary-background-color);
        border: 2px solid var(--border-color);
        border-radius: 0 0 15px 15px;
        width: auto;
        max-height: 0;
        height: auto;
        overflow-y: hidden;
        transition: max-height 0.3s ease-in-out;
    }
    /* Show the dropdown content when the dropdown is active */
    .categorycolumn:hover .dropdown-content {
        display: block;
        max-height: 5000%;
    }
    .navbar {
        border-radius: 15px 15px 0 0;
        border: 2px solid var(--border-color);
        background-color: var(--secondary-background-color);
        display: flex;
        align-items: flex-start;
        justify-content: space-around;
        gap: 10px;
        padding: 2px 0;
    }
    .categories {
        position: relative;
        display: flex;
        flex-direction: column;
        width: auto;
        justify-content: center;
        flex-grow: 1;
        height: auto;
        align-self: stretch;
    }
    .categorycolums {
        flex-grow: 1;
        gap: 10px;
        display: flex;
    }
    .categorycolumn {
        display: flex;
        flex-direction: column;
        line-height: normal;
        width: 100%;
        margin-left: 0;
    }
    .category {
        color: #ededed;
        align-self: center;
        white-space: nowrap;
        margin: auto;
        font: 100 24px Grenze Gotisch, sans-serif;
    }
    .logo {
        border-radius: 30px 15px 0 0;
        background-color: var(--tertiary-background-color);
        align-self: stretch;
        height: auto;
        margin: -2px 0;
        padding: 10px 30px;
    }
    .logolist {
        gap: 10px;
        display: flex;
    }
    .logolistimage {
        display: flex;
        flex-direction: column;
        line-height: normal;
        width: 32%;
        margin-left: 0;
    }
    .logo-image {
        color: #b3a87c;
        margin-top: 8px;
        white-space: nowrap;
        font: 200 30px Kolker Brush, sans-serif;
    }
    .logolisttext {
        display: flex;
        flex-direction: column;
        line-height: normal;
        width: 68%;
        margin-left: 20px;
    }
    .skoria-text {
        color: #ededed;
        margin: auto 0;
        font: 200 30px Grenze Gotisch, sans-serif;
    }
    /* arrange articles as a flexbox */
    .articleList {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }
    /* style each article */
    .article {
        border-radius: 15px;
        border: 2px solid var(--border-color);
        background-color: var(--secondary-background-color);
        padding: 10px;
        margin: 10px;
        position: relative;
        overflow: hidden;
    }
    .article-bg {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-size: cover;
        filter: blur(10px);
        transform: scale(1.1);
        z-index: -1;
        transition: filter 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    .article:hover .article-bg {
        filter: blur(0px);
        transform: scale(1.2);
    }
    .title{
        font : 200 24px Grenze Gotisch, sans-serif;
        font-size: 24px;
    }
    .article-title {
        position: relative;
        z-index: 1;
        /* add color to the title */
        color: #ededed;
        font-size: 20px;
    }
    @media(max-width: 991px) {
        .skoria {
            margin-top: 40px;
            font-size: 40px;
        }
    }
    /* Custom styles for dropdown */
    .filter-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    .filter-column {
        flex-basis: 30%;
        border-right: 2px solid var(--border-color);
        padding-right: 10px;
    }
    .continent-column {
        flex-basis: 60%;
    }
    .list-group {
        flex-wrap: wrap;
        display: flex;
        gap: 10px;
    }
    .list-group div {
        flex: 1 0 100px;
        height: 50px;
        margin: 0;
    }
    .article-group {
        display: flex;
        flex-wrap: wrap;
    }
    .article-group div {
        margin: 0;
    }
    .type-row {
        display: flex;
        margin: 10px 0;
        padding: 10px;
        align-items: center;
        border: 2px solid var(--border-color);
    }
    .type-name {
        width: 200px;
        
    }
    .type-articles {
        display: flex;
        flex-wrap: wrap;
    }

    .list-group-item {
        flex: 1 0 100px;
        margin: 0;
        padding: 10px;
        border-bottom: 2px solid var(--border-color);
        background-color: rgba(0, 0, 0, 0.4);
        transform: scale(0.85);
        filter: blur(0px);
    }
    .list-group-item:hover {
        cursor: pointer;
        opacity: 0.9;
        transform: scale(1.1);
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    /* New rule: style links to not be blue and bold */
    a {
        color: inherit;
    }
</style>
<body>
    <div class="navbar">
        <div class="categories">
            <div class="categorycolumn">
                <div class="category">Articles</div>
                <div class="dropdown-content">
                    <div class="filter-container">
                        <div class="filter-column">
                            <h3>Planes</h3>
                            <div
                                id="planeList" class="list-group"><!-- Populate planes dynamically using JavaScript -->
                            </div>
                        </div>
                        <div class="continent-column">
                            <h3>Continents</h3>
                            <div
                                id="continentList" class="list-group"><!-- Populate continents dynamically using JavaScript -->
                            </div>
                        </div>
                        <div>
                            <h3>Articles</h3>
                            <div
                                id="articleList" class="article-group"><!-- Display articles dynamically using JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="logo">
            <a href="/">
                <div class="logolist">
                    <div class="logolistimage">
                        <div class="logo-image">
                            <img src="/static/Skoria Emblem.png" alt="Skoria Logo" width="30" height="40"></div>
                        </div>
                        <div class="logolisttext">
                            <div class="skoria-text">Skoria</div>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    </div>
    <script>
        {% set navPages = collections.all | eleventyNavigation %}
        const navbar = {{ navPages | dump | safe }}
        // Initialize filter selections as null (no filter by default)
        let selectedPlane = null;
        let selectedContinent = null;
        // Fetch JSON data
        fetch('/static/metadata.json')
            .then(response => response.json())
            .then(jsonData => {
                populateFilters(jsonData);
                populateArticles(jsonData);
            })
            .catch(error => console.error('Error fetching JSON:', error));
        // Function to populate filters based on jsonData
        function populateFilters(jsonData) {
            const planelist = new Set();
            const continentlist = new Set();
            // Object to hold banners for planes and continents
            const planeBanners = {};
            const continentBanners = {};
            Object.keys(jsonData).forEach(key => {
                const item = jsonData[key];
                planelist.add(item.plane);
                continentlist.add(item.continent);
            });
            // Populate planeBanners
            planelist.forEach(plane => {
                Object.keys(jsonData).forEach(key => {
                    const item = jsonData[key];
                    if (item.title === plane && item.banner) {
                        planeBanners[plane] = item.banner;
                    }
                });
            });
            // Populate continentBanners
            continentlist.forEach(continent => {
                Object.keys(jsonData).forEach(key => {
                    const item = jsonData[key];
                    if (item.title === continent && item.banner) {
                        continentBanners[continent] = item.banner;
                    }
                });
            });
            // Populate planes with banners
            document.getElementById("planeList").innerHTML = Array
                .from(planelist)
                .map(
                    plane => `<div class="plane filterbox" style="background-image: url(${
                        (planeBanners[plane] || '').replace(/ /g, '%20')
                    })">${plane}</div>`
                )
                .join('');
            // Populate continents with banners
            document.getElementById("continentList").innerHTML = Array
                .from(continentlist)
                .map(
                    continent => `<div class="continent filterbox" style="background-image: url(${
                        (continentBanners[continent] || '').replace(/ /g, '%20')
                    })">${continent}</div>`
                )
                .join('');
        }
        function populateArticles(jsonData) {
            const articlesByType = {};
            Object.values(jsonData).forEach(article => {
                if(!articlesByType[article.type]) articlesByType[article.type] = [];
                articlesByType[article.type].push(article);
            });
            let output = '';
            Object.keys(articlesByType).forEach(type => {
                if (articlesByType[type].length) {
                    output += `<div class="type-row">`;
                    output += `<div class="type-name">${type}</div>`;
                    output += `<div class="type-articles">`;
                    articlesByType[type].forEach(article => {
                        if (article.banner) {
                            output += `<a href="${article.path}" class="article list-group-item" data-path="${article.path}" data-plane="${article.plane}" data-continent="${article.continent}">
                                <div class="article-bg" style="background-image: url('${article.banner.replace(/ /g, '%20')}')"></div>
                                <div class="article-title">${article.title}</div>
                            </a>`;
                        } else {
                            output += `<a href="${article.path}" class="article list-group-item" data-path="${article.path}" data-plane="${article.plane}" data-continent="${article.continent}">
                                <div class="article-title">${article.title}</div>
                            </a>`;
                        }
                    });
                    output += `</div></div>`;
                }
            });
            document.getElementById("articleList").innerHTML = output;
            // Reapply any existing filters after population
            if (selectedPlane || selectedContinent) {
                filterArticles();
                updateFilterDisplays();
            }
        }
        // Add event listeners to planes, continents
        document.addEventListener('click', function (e) {
            if (e
                    .target
                    .classList
                    .contains('plane')) {
                toggleFilter(e.target, 'plane');
            }
            if (e
                    .target
                    .classList
                    .contains('continent')) {
                toggleFilter(e.target, 'continent');
            }
        });
        function toggleFilter(targetElement, filterType) { // remove active class from all not clicked elements
            if (targetElement.classList.contains('active')) {
                targetElement.classList.remove('active');
                switch (filterType) {
                    case 'plane': selectedPlane = null;
                        break;
                    case 'continent': selectedContinent = null;
                        break;
                }
            } else {
                document.querySelectorAll('.' + filterType).forEach(element => element.classList.remove('active'));
                targetElement.classList.add('active');
                switch (filterType) {
                    case 'plane': selectedPlane = targetElement.innerText.trim();
                        break;
                    case 'continent': selectedContinent = targetElement.innerText.trim();
                }
            } filterArticles();
            updateFilterDisplays();
            grayOutIrrelevantFilters();
        }
        function updateFilterDisplays() {
            document.querySelectorAll('.plane').forEach(plane => {
                if (plane.innerText.trim() === selectedPlane) {
                    plane.classList.add('active');
                } else {
                    plane.classList.remove('active');
                }
            });
            document.querySelectorAll('.continent').forEach(continent => {
                if (continent.innerText.trim() === selectedContinent) {
                    continent.classList.add('active');
                } else {
                    continent.classList.remove('active');
                }
            });
        }
        function filterArticles() {
            document.querySelectorAll('.article').forEach(article => {
                article.style.display = (! selectedPlane || article.dataset.plane === selectedPlane) && (! selectedContinent || article.dataset.continent === selectedContinent)
                    ? 'block'
                    : 'none';
            });
            // Hide row if it has no visible articles
            document.querySelectorAll('.type-row').forEach(row => {
                let anyVisible = false;
                row.querySelectorAll('.article').forEach(article => {
                    if (article.style.display !== 'none') anyVisible = true;
                });
                row.style.display = anyVisible ? 'flex' : 'none';
            });
        }
        function grayOutIrrelevantFilters() {
            const articleElements = document.querySelectorAll('.article');
            const validPlanes = new Set();
            const validContinents = new Set();
            articleElements.forEach(article => {
                if (article.style.display === 'block') {
                    validPlanes.add(article.dataset.plane);
                    validContinents.add(article.dataset.continent);
                }
            });
            document.querySelectorAll('.plane').forEach(plane => {
                if (! validPlanes.has(plane.innerText.trim())) {
                    plane.style.opacity = '0.15';
                    plane.style.pointerEvents = 'none';
                } else {
                    plane.style.opacity = '1';
                    plane.style.pointerEvents = 'auto';
                }
            });
            document.querySelectorAll('.continent').forEach(continent => {
                if (! validContinents.has(continent.innerText.trim())) {
                    continent.style.opacity = '0.15';
                    continent.style.pointerEvents = 'none';
                } else {
                    continent.style.opacity = '1';
                    continent.style.pointerEvents = 'auto';
                }
            });
        }
    </script>
</body>